"use strict";function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();!function(){var e=function a(){_classCallCheck(this,a)},t=function(e){function t(e,n,r,o){_classCallCheck(this,t);var i=_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this));return i.studentId=e,i.tasks=[],i.name=n,i.mentorsPriorityList=void 0!==r?r:[],i}return _inherits(t,e),_createClass(t,[{key:"setMark",value:function(e,t){this.studMarks.push(_defineProperty({},e.id,t))}},{key:"id",set:function(e){throw new Error("Нельзя менять ID.")},get:function(){return this.studentId}},{key:"name",set:function(e){this.studentName=e},get:function(){return this.studentName}},{key:"team",set:function(e){this.studentTeam=e},get:function(){return this.studentTeam}}]),t}(e),n=function(e){function t(e,n,r){_classCallCheck(this,t);var o=_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this));return o.taskId=e,o.title=n,o.taskExecutors=void 0!==r?r:[],o}return _inherits(t,e),_createClass(t,[{key:"id",set:function(e){throw new Error("Нельзя менять ID.")},get:function(){return this.taskId}},{key:"title",set:function(e){this.taskTitle=e},get:function(){return this.taskTitle}}]),t}(e),r=function(e){function t(e,n,r){_classCallCheck(this,t);var o=_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this));return o.teamId=e,o.name=n,o.teamTeammates=void 0!==r?r:[],o}return _inherits(t,e),_createClass(t,[{key:"addTeammate",value:function(e){this.teamTeammates.push(e)}},{key:"removeTeammates",value:function(e){var t=this;e.forEach(function(e,n,r){var o=s.select(e);o||console.log("Студент "+e+" не найден.");var i=t.teamTeammates.indexOf(o);-1!==i&&t.teamTeammates.splice(i,1)})}},{key:"id",set:function(e){throw new Error("Нельзя менять ID.")},get:function(){return this.teamId}},{key:"name",set:function(e){this.teamName=e},get:function(){return this.teamName}}]),t}(e),o=function(e){function t(e,n,r){_classCallCheck(this,t);var o=_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this));return o.mentorId=e,o.name=n,o.preferredStudentsList=void 0!==r?r:[],o}return _inherits(t,e),_createClass(t,[{key:"id",set:function(e){throw new Error("Нельзя менять ID.")},get:function(){return this.mentorId}},{key:"name",set:function(e){this.mentorName=e},get:function(){return this.mentorName}},{key:"preferredStudentsList",set:function(e){if(("undefined"==typeof e?"undefined":_typeof(e))!==_typeof([]))throw new Error("Список должен быть массивом.")}}]),t}(e),i=0,s={add:function(e,a){if("undefined"==typeof e||0==e.length)throw new Error("Тип должен быть указан.");if("string"!=typeof e)throw new Error("Тип должен быть строкой");if("undefined"==typeof a||!("name"in a||"title"in a))throw new Error("Отсутствует 'options'. Задайте его хотя бы с одним свойством 'name' или 'title'.");if("object"!=("undefined"==typeof a?"undefined":_typeof(a)))throw new Error("Options должен быть объектом {}.");switch(e){case"student":var u=i++,f=new t(u,a.name,a.mentorsPriorityList);if(a.team){var c=this.select(a.team);c||(c=s.add("team",{name:a.team})),c.addTeammate(f),f.team=c}return s.students.push(f),console.log("Added new Student: "+f.name+"."),f;case"task":var l=i++,d=new n(l,a.title,a.executors);return s.tasks.push(d),console.log("Added new Task: "+d.title+"."),d;case"team":var m=i++,h=new r(m,a.name,a.teammates);return s.teams.push(h),console.log("Added new Team: "+h.name+"."),h;case"mentor":var p=i++,y=new o(p,a.name,a.preferredStudents);return s.mentors.push(y),console.log("Added new Mentor: "+y.name+"."),y;default:throw new Error("Типа '"+e+"' не существует.")}},edit:function(e,t){if("undefined"==typeof e||0==e.length)throw new Error("Селектор должен быть указан.");if("string"!=typeof e&&"number"!=typeof e)throw new Error("Селектор должен быть строкой или числом");if("undefined"==typeof t)throw new Error("Отсутствует 'options'. Задайте его хотя бы с одним свойством.");if("object"!=("undefined"==typeof t?"undefined":_typeof(t)))throw new Error("Options должен быть объектом {}.");var n=this.select(e);for(var r in t)"id"!=r&&(n[r]=t[r]);return n},students:[],mentors:[],tasks:[],teams:[],select:function(t){var n=void 0;if("number"!=typeof t&&isNaN(t)){if("string"==typeof t){if(s.students.forEach(function(e,r,o){e.name!=t||n||(n=e)}),n)return n;if(s.mentors.forEach(function(e,r,o){e.name!=t||n||(n=e)}),n)return n;if(s.tasks.forEach(function(e,r,o){e.title!=t||n||(n=e)}),n)return n;if(s.teams.forEach(function(e,r,o){e.name!=t||n||(n=e)}),n)return n}else if(t instanceof e)return t}else{var t=parseInt(t);if(s.students.forEach(function(e,r,o){e.id!=t||n||(n=e)}),n)return n;if(s.mentors.forEach(function(e,r,o){e.id!=t||n||(n=e)}),n)return n;if(s.tasks.forEach(function(e,r,o){e.id!=t||n||(n=e)}),n)return n;if(s.teams.forEach(function(e,r,o){e.id!=t||n||(n=e)}),n)return n}return void 0==n?!1:n}};new t("Никита");window.Lib=s}();
//# sourceMappingURL=data:application/json;base64,

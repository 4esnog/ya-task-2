"use strict";function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t},_createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();!function(){var t=function a(){_classCallCheck(this,a)},e=function(t){function e(t,n,r,s){_classCallCheck(this,e);var o=_possibleConstructorReturn(this,Object.getPrototypeOf(e).call(this));return o.studentId=t,o.studentTasks=[],o.name=n,o.preferredMentorsList=void 0!==r?r:[],o}return _inherits(e,t),_createClass(e,[{key:"addTasks",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?!1:arguments[1],r=this;if(t instanceof n){for(var s in this.studentTasks)if(t==s.task)return;var o={task:t,mark:0};if(this.studentTasks.push(o),e)return;t.addExecutors(this,!0)}else Array.isArray(t)&&t.forEach(function(t,s,o){if(t instanceof n){for(var i in r.studentTasks)if(t==i.task)return;var a={task:t,mark:0};if(r.studentTasks.push(a),e)return;t.addExecutors(r,!0)}});return this}},{key:"removeTasks",value:function(t){var e=this;return t.forEach(function(t,n,r){var s=i.select(t);if(!s)return void console.log("Студент "+t+" не найден.");var o=e.studentTasks.indexOf(s);-1!==o&&e.studentTasks.splice(o,1)}),this}},{key:"setMark",value:function(t,e){var r=i.select(t);if(!(r&&r instanceof n))throw new Error("Задание "+t+" не найдено.");return this.studentTasks.forEach(function(t,n,s){t.task==r&&(t.mark=e)}),this}},{key:"id",set:function(t){throw new Error("Нельзя менять ID.")},get:function(){return this.studentId}},{key:"name",set:function(t){this.studentName=t},get:function(){return this.studentName}},{key:"team",set:function(t){this.studentTeam=t},get:function(){return this.studentTeam}},{key:"preferredMentorsList",set:function(t){if(("undefined"==typeof t?"undefined":_typeof(t))!==_typeof([]))throw new Error("Список должен быть массивом.");t=t.map(function(t,e,n){var r=i.select(t);return r instanceof s||(r=!1),r}),this.studentPreferredMentorsList=t.filter(function(t,e,n){return t!==!1})},get:function(){this.studentPreferredMentorsList}}]),e}(t),n=function(e){function n(t,e,r,s){_classCallCheck(this,n);var o=_possibleConstructorReturn(this,Object.getPrototypeOf(n).call(this));return o.taskId=t,o.title=e,o.content=r,o.taskExecutors=void 0!==s?s:[],o}return _inherits(n,e),_createClass(n,[{key:"addExecutors",value:function(e){var n=arguments.length<=1||void 0===arguments[1]?!1:arguments[1],r=this;if(e instanceof t){if(e in this.taskExecutors)return;if(this.taskExecutors.push(e),n)return;e.addTasks(this,!0)}else Array.isArray(e)&&e.forEach(function(t,e,s){t in r.taskExecutors||(r.taskExecutors.push(t),n||t.addTasks(r,!0))});return this}},{key:"removeExecutors",value:function(t){var e=this;return t.forEach(function(t,n,r){var s=i.select(t);if(!s)return void console.log("Студент "+t+" не найден.");var o=e.taskExecutors.indexOf(s);-1!==o&&e.taskExecutors.splice(o,1)}),this}},{key:"id",set:function(t){throw new Error("Нельзя менять ID.")},get:function(){return this.taskId}},{key:"title",set:function(t){this.taskTitle=t},get:function(){return this.taskTitle}},{key:"content",set:function(t){this.taskContent=t},get:function(){return this.taskContent}},{key:"executors",get:function(){return this.taskExecutors}}]),n}(t),r=function(e){function r(t,e,n){_classCallCheck(this,r);var s=_possibleConstructorReturn(this,Object.getPrototypeOf(r).call(this));return s.teamId=t,s.name=e,s.teamTasks=[],s.teammates=void 0!==n?n:[],s}return _inherits(r,e),_createClass(r,[{key:"addTeammates",value:function(e){return e instanceof t?this.teamTeammates.push(e):isArray(e)&&e.forEach(function(t,e,n){this.teamTeammates.push(t)}),this}},{key:"removeTeammates",value:function(t){var e=this;return t.forEach(function(t,n,r){var s=i.select(t);s||console.log("Студент "+t+" не найден.");var o=e.teamTeammates.indexOf(s);-1!==o&&e.teamTeammates.splice(o,1)}),this}},{key:"addTasks",value:function(e){var r=arguments.length<=1||void 0===arguments[1]?!1:arguments[1],s=this;if(e instanceof t){for(var o in s.studentTasks)if(e==o.task)return;var i={task:e,mark:0};if(this.teamTasks.push(i),r)return;e.addExecutors(this,!0)}else Array.isArray(e)&&e.forEach(function(t,e,o){if(t instanceof n){for(var i in s.teamTasks)if(t==i.task)return;var a={task:t,mark:0};if(s.teamTasks.push(a),r)return;t.addExecutors(s,!0)}});return this}},{key:"removeTasks",value:function(t){var e=this;return t.forEach(function(t,n,r){var s=i.select(t);if(!s)return void console.log("Студент "+t+" не найден.");var o=e.teamTasks.indexOf(s);-1!==o&&e.teamTasks.splice(o,1)}),this}},{key:"setMark",value:function(t,e){var r=i.select(t);if(!(r&&r instanceof n))throw new Error("Задание "+t+" не найдено.");return this.teamTasks.forEach(function(t,n,s){t.task==r&&(t.mark=e)}),this}},{key:"id",set:function(t){throw new Error("Нельзя менять ID.")},get:function(){return this.teamId}},{key:"name",set:function(t){this.teamName=t},get:function(){return this.teamName}},{key:"teammates",set:function(t){this.teamTeammates=t},get:function(){return this.teamTeammates}}]),r}(t),s=function(t){function n(t,e,r){_classCallCheck(this,n);var s=_possibleConstructorReturn(this,Object.getPrototypeOf(n).call(this));return s.mentorId=t,s.name=e,s.preferredStudentsList=void 0!==r?r:[],s}return _inherits(n,t),_createClass(n,[{key:"id",set:function(t){throw new Error("Нельзя менять ID.")},get:function(){return this.mentorId}},{key:"name",set:function(t){this.mentorName=t},get:function(){return this.mentorName}},{key:"preferredStudentsList",set:function(t){if(("undefined"==typeof t?"undefined":_typeof(t))!==_typeof([]))throw new Error("Список должен быть массивом.");t=t.map(function(t,n,r){var s=i.select(t);return s instanceof e||(s=!1),s}),this.mentorPreferredStudentsList=t.filter(function(t,e,n){return t!==!1})},get:function(){return this.mentorPreferredStudentsList}}]),n}(t),o=0,i={add:function(t,a){if("undefined"==typeof t||0==t.length)throw new Error("Тип должен быть указан.");if("string"!=typeof t)throw new Error("Тип должен быть строкой");if("undefined"==typeof a||!("name"in a||"title"in a))throw new Error("Отсутствует 'options'. Задайте его хотя бы с одним свойством 'name' или 'title'.");if("object"!=("undefined"==typeof a?"undefined":_typeof(a)))throw new Error("Options должен быть объектом {}.");switch(t){case"student":var u=o++,f=new e(u,a.name,a.preferredMentorsList);if(a.team){var c=this.select(a.team);c||(c=i.add("team",{name:a.team})),f.team=c,c.addTeammates(f,!0)}return i.students.push(f),console.log("Added new Student: "+f.name+"."),f;case"task":var d=o++,h=new n(d,a.title,a.content);if(a.executors){var l=a.executors.map(function(t,n,s){var o=i.select(t);if(!o)throw new Error("Невозможно добавить несуществующего исполнителя "+t+".");if(!(o instanceof e||o instanceof r))throw new Error("Исполнитель должен быть студентом или командой.");return o});h.addExecutors(l)}return i.tasks.push(h),console.log("Added new Task: "+h.title+"."),h;case"team":var m=o++,k=new r(m,a.name);if(a.teammates){var p=a.teammates.map(function(t,n,r){var s=i.select(t);if(!s)throw new Error("Невозможно добавить в команду несуществующего студента "+t+".");if(!(s instanceof e))throw new Error("В команде могут состоять только студенты.");return s});k.addTeammates(p)}return i.teams.push(k),console.log("Added new Team: "+k.name+"."),k;case"mentor":var y=o++,v=new s(y,a.name,a.preferredStudentsList);return i.mentors.push(v),console.log("Added new Mentor: "+v.name+"."),v;default:throw new Error("Типа '"+t+"' не существует.")}},edit:function(t,e){if("undefined"==typeof t||0==t.length)throw new Error("Селектор должен быть указан.");if("string"!=typeof t&&"number"!=typeof t)throw new Error("Селектор должен быть строкой или числом");if("undefined"==typeof e)throw new Error("Отсутствует 'options'. Задайте его хотя бы с одним свойством.");if("object"!=("undefined"==typeof e?"undefined":_typeof(e)))throw new Error("Options должен быть объектом {}.");var n=this.select(t);for(var r in e)"id"!=r&&(n[r]=e[r]);return n},students:[],mentors:[],tasks:[],teams:[],select:function(e){var n=void 0;if("number"!=typeof e&&isNaN(e)){if("string"==typeof e){if(i.students.forEach(function(t,r,s){t.name!=e||n||(n=t)}),n)return n;if(i.mentors.forEach(function(t,r,s){t.name!=e||n||(n=t)}),n)return n;if(i.tasks.forEach(function(t,r,s){t.title!=e||n||(n=t)}),n)return n;if(i.teams.forEach(function(t,r,s){t.name!=e||n||(n=t)}),n)return n}else if(e instanceof t)return e}else{var e=parseInt(e);if(i.students.forEach(function(t,r,s){t.id!=e||n||(n=t)}),n)return n;if(i.mentors.forEach(function(t,r,s){t.id!=e||n||(n=t)}),n)return n;if(i.tasks.forEach(function(t,r,s){t.id!=e||n||(n=t)}),n)return n;if(i.teams.forEach(function(t,r,s){t.id!=e||n||(n=t)}),n)return n}return void 0==n?!1:n}};new e("Никита");window.Lib=i}();
//# sourceMappingURL=data:application/json;base64,
